// Copyright AudioKit. All Rights Reserved. Revision History at http://github.com/AudioKit/AudioKit/
// This file was auto-autogenerated by scripts and templates at http://github.com/AudioKit/AudioKitDevTools/

import AudioKit
import AudioKitEX
import AVFoundation
import CAudioKitEX

/// Based on the Pink Trombone algorithm by Neil Thapen, this implements a physical
/// model of the vocal tract glottal pulse wave. The tract model is based on the
/// classic Kelly-Lochbaum
/// segmented cylindrical 1d waveguide model, and the glottal pulse wave is a
/// LF glottal pulse model.
///
public class VocalTract: Node {
    public var connections: [Node] { [] }
    public var avAudioNode = instantiate(instrument: "vocw")

    /// Specification details for frequency
    public static let frequencyDef = NodeParameterDef(
        identifier: "frequency",
        name: "Glottal frequency",
        address: akGetParameterAddress("VocalTractParameterFrequency"),
        defaultValue: 160.0,
        range: 0.0 ... 22050.0,
        unit: .hertz
    )

    /// Glottal frequency.
    @Parameter(frequencyDef) public var frequency: AUValue

    /// Specification details for tonguePosition
    public static let tonguePositionDef = NodeParameterDef(
        identifier: "tonguePosition",
        name: "Tongue position",
        address: akGetParameterAddress("VocalTractParameterTonguePosition"),
        defaultValue: 0.5,
        range: 0.0 ... 1.0,
        unit: .generic
    )

    /// Tongue position (0-1)
    @Parameter(tonguePositionDef) public var tonguePosition: AUValue

    /// Specification details for tongueDiameter
    public static let tongueDiameterDef = NodeParameterDef(
        identifier: "tongueDiameter",
        name: "Tongue diameter",
        address: akGetParameterAddress("VocalTractParameterTongueDiameter"),
        defaultValue: 1.0,
        range: 0.0 ... 1.0,
        unit: .generic
    )

    /// Tongue diameter (0-1)
    @Parameter(tongueDiameterDef) public var tongueDiameter: AUValue

    /// Specification details for tenseness
    public static let tensenessDef = NodeParameterDef(
        identifier: "tenseness",
        name: "Vocal tenseness",
        address: akGetParameterAddress("VocalTractParameterTenseness"),
        defaultValue: 0.6,
        range: 0.0 ... 1.0,
        unit: .generic
    )

    /// Vocal tenseness. 0 = all breath. 1=fully saturated.
    @Parameter(tensenessDef) public var tenseness: AUValue

    /// Specification details for nasality
    public static let nasalityDef = NodeParameterDef(
        identifier: "nasality",
        name: "Nasality",
        address: akGetParameterAddress("VocalTractParameterNasality"),
        defaultValue: 0.0,
        range: 0.0 ... 1.0,
        unit: .generic
    )

    /// Sets the velum size. Larger values of this creates more nasally sounds.
    @Parameter(nasalityDef) public var nasality: AUValue

    // MARK: - Initialization

    /// Initialize this vocal tract node
    ///
    /// - Parameters:
    ///   - frequency: Glottal frequency.
    ///   - tonguePosition: Tongue position (0-1)
    ///   - tongueDiameter: Tongue diameter (0-1)
    ///   - tenseness: Vocal tenseness. 0 = all breath. 1=fully saturated.
    ///   - nasality: Sets the velum size. Larger values of this creates more nasally sounds.
    ///
    public init(
        frequency: AUValue = frequencyDef.defaultValue,
        tonguePosition: AUValue = tonguePositionDef.defaultValue,
        tongueDiameter: AUValue = tongueDiameterDef.defaultValue,
        tenseness: AUValue = tensenessDef.defaultValue,
        nasality: AUValue = nasalityDef.defaultValue
    ) {
        setupParameters()

        stop()

        self.frequency = frequency
        self.tonguePosition = tonguePosition
        self.tongueDiameter = tongueDiameter
        self.tenseness = tenseness
        self.nasality = nasality
    }
}
