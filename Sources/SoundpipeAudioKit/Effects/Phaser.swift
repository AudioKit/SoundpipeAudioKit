// Copyright AudioKit. All Rights Reserved. Revision History at http://github.com/AudioKit/AudioKit/
// This file was auto-autogenerated by scripts and templates at http://github.com/AudioKit/AudioKitDevTools/

import AudioKit
import AudioKitEX
import AVFoundation
import CAudioKitEX

/// This is a stereo phaser, generated from Faust code taken from the Guitarix project.
public class Phaser: Node {
    let input: Node

    /// Connected nodes
    public var connections: [Node] { [input] }

    /// Underlying AVAudioNode
    public var avAudioNode = instantiate(effect: "phas")

    // MARK: - Parameters

    /// Specification details for notchMinimumFrequency
    public static let notchMinimumFrequencyDef = NodeParameterDef(
        identifier: "notchMinimumFrequency",
        name: "Min notch frequency",
        address: akGetParameterAddress("PhaserParameterNotchMinimumFrequency"),
        defaultValue: 100,
        range: 20 ... 5000,
        unit: .hertz
    )

    /// Notch Minimum Frequency
    @Parameter(notchMinimumFrequencyDef) public var notchMinimumFrequency: AUValue

    /// Specification details for notchMaximumFrequency
    public static let notchMaximumFrequencyDef = NodeParameterDef(
        identifier: "notchMaximumFrequency",
        name: "Max notch frequency",
        address: akGetParameterAddress("PhaserParameterNotchMaximumFrequency"),
        defaultValue: 800,
        range: 20 ... 10000,
        unit: .hertz
    )

    /// Notch Maximum Frequency
    @Parameter(notchMaximumFrequencyDef) public var notchMaximumFrequency: AUValue

    /// Specification details for notchWidth
    public static let notchWidthDef = NodeParameterDef(
        identifier: "notchWidth",
        name: "Notch width",
        address: akGetParameterAddress("PhaserParameterNotchWidth"),
        defaultValue: 1000,
        range: 10 ... 5000,
        unit: .hertz
    )

    /// Between 10 and 5000
    @Parameter(notchWidthDef) public var notchWidth: AUValue

    /// Specification details for notchFrequency
    public static let notchFrequencyDef = NodeParameterDef(
        identifier: "notchFrequency",
        name: "Notch frequency",
        address: akGetParameterAddress("PhaserParameterNotchFrequency"),
        defaultValue: 1.5,
        range: 1.1 ... 4.0,
        unit: .hertz
    )

    /// Between 1.1 and 4
    @Parameter(notchFrequencyDef) public var notchFrequency: AUValue

    /// Specification details for vibratoMode
    public static let vibratoModeDef = NodeParameterDef(
        identifier: "vibratoMode",
        name: "Vibrato mode",
        address: akGetParameterAddress("PhaserParameterVibratoMode"),
        defaultValue: 1,
        range: 0 ... 1,
        unit: .generic
    )

    /// Direct or Vibrato (default)
    @Parameter(vibratoModeDef) public var vibratoMode: AUValue

    /// Specification details for depth
    public static let depthDef = NodeParameterDef(
        identifier: "depth",
        name: "Depth",
        address: akGetParameterAddress("PhaserParameterDepth"),
        defaultValue: 1,
        range: 0 ... 1,
        unit: .generic
    )

    /// Between 0 and 1
    @Parameter(depthDef) public var depth: AUValue

    /// Specification details for feedback
    public static let feedbackDef = NodeParameterDef(
        identifier: "feedback",
        name: "Feedback",
        address: akGetParameterAddress("PhaserParameterFeedback"),
        defaultValue: 0,
        range: 0 ... 1,
        unit: .generic
    )

    /// Between 0 and 1
    @Parameter(feedbackDef) public var feedback: AUValue

    /// Specification details for inverted
    public static let invertedDef = NodeParameterDef(
        identifier: "inverted",
        name: "Inversion",
        address: akGetParameterAddress("PhaserParameterInverted"),
        defaultValue: 0,
        range: 0 ... 1,
        unit: .generic
    )

    /// 1 or 0
    @Parameter(invertedDef) public var inverted: AUValue

    /// Specification details for lfoBPM
    public static let lfoBPMDef = NodeParameterDef(
        identifier: "lfoBPM",
        name: "LFO Frequency",
        address: akGetParameterAddress("PhaserParameterLfoBPM"),
        defaultValue: 30,
        range: 24 ... 360,
        unit: .BPM
    )

    /// Between 24 and 360
    @Parameter(lfoBPMDef) public var lfoBPM: AUValue

    /// Specification details for dryWetMix
    public static let dryWetMixDef = NodeParameterDef(
        identifier: "dryWetMix",
        name: "Dry/Wet Mix",
        address: akGetParameterAddress("PhaserParameterDryWetMix"),
        defaultValue: 1.0,
        range: 0.0 ... 1.0,
        unit: .percent
    )

    /// Dry/Wet Mix
    @Parameter(dryWetMixDef) public var dryWetMix: AUValue

    // MARK: - Initialization

    /// Initialize this phaser node
    ///
    /// - Parameters:
    ///   - input: Input node to process
    ///   - notchMinimumFrequency: Notch Minimum Frequency
    ///   - notchMaximumFrequency: Notch Maximum Frequency
    ///   - notchWidth: Between 10 and 5000
    ///   - notchFrequency: Between 1.1 and 4
    ///   - vibratoMode: Direct or Vibrato (default)
    ///   - depth: Between 0 and 1
    ///   - feedback: Between 0 and 1
    ///   - inverted: 1 or 0
    ///   - lfoBPM: Between 24 and 360
    ///   - dryWetMix: Dry/Wet Mix
    ///
    public init(
        _ input: Node,
        notchMinimumFrequency: AUValue = notchMinimumFrequencyDef.defaultValue,
        notchMaximumFrequency: AUValue = notchMaximumFrequencyDef.defaultValue,
        notchWidth: AUValue = notchWidthDef.defaultValue,
        notchFrequency: AUValue = notchFrequencyDef.defaultValue,
        vibratoMode: AUValue = vibratoModeDef.defaultValue,
        depth: AUValue = depthDef.defaultValue,
        feedback: AUValue = feedbackDef.defaultValue,
        inverted: AUValue = invertedDef.defaultValue,
        lfoBPM: AUValue = lfoBPMDef.defaultValue,
        dryWetMix: AUValue = dryWetMixDef.defaultValue
    ) {
        self.input = input

        setupParameters()

        self.notchMinimumFrequency = notchMinimumFrequency
        self.notchMaximumFrequency = notchMaximumFrequency
        self.notchWidth = notchWidth
        self.notchFrequency = notchFrequency
        self.vibratoMode = vibratoMode
        self.depth = depth
        self.feedback = feedback
        self.inverted = inverted
        self.lfoBPM = lfoBPM
        self.dryWetMix = dryWetMix
    }
}
