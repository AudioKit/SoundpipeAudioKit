// Copyright AudioKit. All Rights Reserved. Revision History at http://github.com/AudioKit/AudioKit/
// This file was auto-autogenerated by scripts and templates at http://github.com/AudioKit/AudioKitDevTools/

import AudioKit
import AudioKitEX
import AVFoundation
import CAudioKitEX

/// A high quality talkbox emulation, similar to a vocoder.
/// This is the talkbox plugin ported from the MDA plugin suite. In many ways,
/// this Talkbox functions like a vocoder: it takes in a source signal (usually
/// speech), which then excites an excitation signal
/// (usually a harmonically rich signal like a saw wave). This particular algorithm
/// uses linear-predictive coding (LPC), making speech intelligibility better
/// than most vocoder implementations.
///
public class Talkbox: Node {
    let input: Node
    let excitation: Node

    /// Connected nodes
    public var connections: [Node] { [input, excitation] }

    /// Underlying AVAudioNode
    public var avAudioNode = instantiate(effect: "tbox")

    // MARK: - Parameters

    /// Quality of the talkbox sound. 0=lowest fidelity. 1=highest fidelity
    public static let qualityDef = NodeParameterDef(
        identifier: "quality",
        name: "Quality",
        address: akGetParameterAddress("TalkboxParameterQuality"),
        defaultValue: 1,
        range: 0 ... 1,
        unit: .generic
    )

    /// Quality parameter, from 0 (lowest fidelity) to 1 (highest fidelity)
    @Parameter(qualityDef) public var quality: AUValue

    // MARK: - Initialization

    /// Initialize this talkbox node
    ///
    /// - Parameters:
    ///   - input: Source signal that shapes the excitation (modulator)
    ///   - excitation: The signal to be excited (carrier)
    ///   - quality: Quality of the talkbox sound (0=lowest fidelity, 1=highest fidelity)
    ///
    public init(
        _ input: Node,
        excitation: Node,
        quality: AUValue = qualityDef.defaultValue
    ) {
        self.input = input
        self.excitation = excitation

        setupParameters()

        self.quality = quality
    }
}
