// Copyright AudioKit. All Rights Reserved. Revision History at http://github.com/AudioKit/AudioKit/
// This file was auto-autogenerated by scripts and templates at http://github.com/AudioKit/AudioKitDevTools/

import AudioKit
import AudioKitEX
import AVFoundation
import CAudioKitEX

/// Analogue model of the Korg 35 Lowpass Filter
public class KorgLowPassFilter: Node {
    let input: Node

    /// Connected nodes
    public var connections: [Node] { [input] }

    /// Underlying AVAudioNode
    public var avAudioNode = instantiate(effect: "klpf")

    // MARK: - Parameters

    /// Specification details for cutoffFrequency
    public static let cutoffFrequencyDef = NodeParameterDef(
        identifier: "cutoffFrequency",
        name: "Filter cutoff",
        address: akGetParameterAddress("KorgLowPassFilterParameterCutoffFrequency"),
        defaultValue: 1000.0,
        range: 0.0 ... 22050.0,
        unit: .hertz
    )

    /// Filter cutoff
    @Parameter(cutoffFrequencyDef) public var cutoffFrequency: AUValue

    /// Specification details for resonance
    public static let resonanceDef = NodeParameterDef(
        identifier: "resonance",
        name: "Resonance",
        address: akGetParameterAddress("KorgLowPassFilterParameterResonance"),
        defaultValue: 1.0,
        range: 0.0 ... 2.0,
        unit: .generic
    )

    /// Filter resonance (should be between 0-2)
    @Parameter(resonanceDef) public var resonance: AUValue

    /// Specification details for saturation
    public static let saturationDef = NodeParameterDef(
        identifier: "saturation",
        name: "Saturation",
        address: akGetParameterAddress("KorgLowPassFilterParameterSaturation"),
        defaultValue: 0.0,
        range: 0.0 ... 10.0,
        unit: .generic
    )

    /// Filter saturation.
    @Parameter(saturationDef) public var saturation: AUValue

    // MARK: - Initialization

    /// Initialize this filter node
    ///
    /// - Parameters:
    ///   - input: Input node to process
    ///   - cutoffFrequency: Filter cutoff
    ///   - resonance: Filter resonance (should be between 0-2)
    ///   - saturation: Filter saturation.
    ///
    public init(
        _ input: Node,
        cutoffFrequency: AUValue = cutoffFrequencyDef.defaultValue,
        resonance: AUValue = resonanceDef.defaultValue,
        saturation: AUValue = saturationDef.defaultValue
    ) {
        self.input = input

        setupParameters()

        self.cutoffFrequency = cutoffFrequency
        self.resonance = resonance
        self.saturation = saturation
    }
}
