// Copyright AudioKit. All Rights Reserved. Revision History at http://github.com/AudioKit/AudioKit/
// This file was auto-autogenerated by scripts and templates at http://github.com/AudioKit/AudioKitDevTools/

import AudioKit
import AudioKitEX
import AVFoundation
import CAudioKitEX

/// The output for reson appears to be very hot, so take caution when using this module.
public class ResonantFilter: Node {
    let input: Node

    /// Connected nodes
    public var connections: [Node] { [input] }

    /// Underlying AVAudioNode
    public var avAudioNode = instantiate(effect: "resn")

    // MARK: - Parameters

    /// Specification details for frequency
    public static let frequencyDef = NodeParameterDef(
        identifier: "frequency",
        name: "Frequency",
        address: akGetParameterAddress("ResonantFilterParameterFrequency"),
        defaultValue: 4000.0,
        range: 100.0 ... 20000.0,
        unit: .hertz
    )

    /// Center frequency of the filter, or frequency position of the peak response.
    @Parameter(frequencyDef) public var frequency: AUValue

    /// Specification details for bandwidth
    public static let bandwidthDef = NodeParameterDef(
        identifier: "bandwidth",
        name: "Bandwidth of the filter.",
        address: akGetParameterAddress("ResonantFilterParameterBandwidth"),
        defaultValue: 1000.0,
        range: 0.0 ... 10000.0,
        unit: .hertz
    )

    /// Bandwidth of the filter.
    @Parameter(bandwidthDef) public var bandwidth: AUValue

    // MARK: - Initialization

    /// Initialize this filter node
    ///
    /// - Parameters:
    ///   - input: Input node to process
    ///   - frequency: Center frequency of the filter, or frequency position of the peak response.
    ///   - bandwidth: Bandwidth of the filter.
    ///
    public init(
        _ input: Node,
        frequency: AUValue = frequencyDef.defaultValue,
        bandwidth: AUValue = bandwidthDef.defaultValue
    ) {
        self.input = input

        setupParameters()

        self.frequency = frequency
        self.bandwidth = bandwidth
    }
}
